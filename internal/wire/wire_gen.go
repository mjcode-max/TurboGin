// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/mjcode-max/TurboGin/config"
	"github.com/mjcode-max/TurboGin/internal/controller"
	"github.com/mjcode-max/TurboGin/internal/dao"
	"github.com/mjcode-max/TurboGin/internal/router"
	"github.com/mjcode-max/TurboGin/internal/service"
	"github.com/mjcode-max/TurboGin/pkg/db"
	"github.com/mjcode-max/TurboGin/pkg/logger"
	"github.com/mjcode-max/TurboGin/pkg/middleware"
	"github.com/mjcode-max/TurboGin/pkg/redis"
	"github.com/mjcode-max/TurboGin/pkg/server"
)

// Injectors from wire.go:

func InitApp() (*server.Server, func(), error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, nil, err
	}
	gormDB, err := db.NewGormDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	loggerLogger, err := logger.New(configConfig)
	if err != nil {
		return nil, nil, err
	}
	auth := middleware.NewAuth(configConfig)
	cors := middleware.NewCORS(configConfig)
	rateLimiter := middleware.NewRateLimiter(configConfig)
	ipAccess := middleware.NewIPAccess(configConfig)
	iUserDAO := dao.NewUserDAO(gormDB)
	client, err := redis.New(configConfig, loggerLogger)
	if err != nil {
		return nil, nil, err
	}
	iUserService := service.NewUserService(iUserDAO, loggerLogger, client)
	container := controller.NewContainer(iUserService)
	v := router.RegisterRoutes(container, auth)
	serverServer := server.New(configConfig, gormDB, loggerLogger, auth, cors, rateLimiter, ipAccess, container, v)
	return serverServer, func() {
	}, nil
}

// wire.go:

var daoSet = wire.NewSet(dao.NewUserDAO)

var serviceSet = wire.NewSet(service.NewUserService)

var controllerSet = wire.NewSet(controller.NewContainer)

var routerSet = wire.NewSet(router.RegisterRoutes)

var middlewareSet = wire.NewSet(middleware.NewCORS, middleware.NewAuth, middleware.NewRateLimiter, middleware.NewRequestLog, middleware.NewIPAccess)

var systemSet = wire.NewSet(config.Load, db.NewGormDB, logger.New, redis.New, server.New)
